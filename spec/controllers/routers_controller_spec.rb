require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any router libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RoutersController, type: :controller do

  let(:valid_session) { {} }
  let(:json_response) { { format: 'json' } }

  describe "GET index" do
    render_views

    it "assigns all routers as @routers" do
      router = create(:router)
      get :index, json_response
      expect(assigns(:routers)).to eq([router])
    end
  end

  describe "GET show" do
    render_views

    it "assigns the requested router as @router" do
      router = create(:router)
      get :show, json_response.merge(id: router.id)
      expect(assigns(:router)).to eq(router)
    end
  end

  describe "POST create" do
    render_views

    describe "with valid params" do
      it "creates a new Router" do
        expect {
          post :create, json_response.merge({router: attributes_for(:router)})
        }.to change(Router, :count).by(1)
      end

      it "assigns a newly created router as @router" do
        post :create, json_response.merge({router: attributes_for(:router)})
        expect(assigns(:router)).to be_a(Router)
        expect(assigns(:router)).to be_persisted
      end

      it "responds with newly created router" do
        post :create, json_response.merge({router: attributes_for(:router)})
        expect(assigns(:router)).to eq(Router.last)
      end
    end
  end

  describe "PUT update" do
    render_views

    describe "with valid params" do
      it "updates the requested router" do
        router = create(:router)
        new_context = 'RouterNewContext'
        put :update, json_response.merge({id: router.id, router: { context: new_context }})
        expect change { router.reload.title }.to new_context
      end

      it "assigns the requested router as @router" do
        router = create(:router)
        router.context = 'RouterNewContext'
        put :update, json_response.merge({id: router.id, router: router.to_hash})
        expect(assigns(:router)).to eq(router)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested router" do
      router = create(:router)
      expect {
        delete :destroy, json_response.merge({id: router.id})
      }.to change(Router, :count).by(-1)
    end
  end
end
